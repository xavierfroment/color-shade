{"version":3,"sources":["components/utils.js","components/SingleColor.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["componentToHex","c","hex","toString","length","rgbToHex","r","g","b","SingleColor","rgb","weight","index","hexColor","useState","alert","setAlert","bcg","join","hexValue","useEffect","timeout","setTimeout","clearTimeout","className","style","backgroundColor","onClick","navigator","clipboard","writeText","Form","color","setColor","error","setError","Values","all","list","setList","e","preventDefault","colors","type","value","onChange","target","placeholder","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAA,SAASA,EAAeC,GACtB,IAAIC,EAAMD,EAAEE,SAAS,IACrB,OAAsB,IAAfD,EAAIE,OAAe,IAAMF,EAAMA,EAOzBG,MAJf,SAAkBC,EAAEC,EAAEC,GACpB,MAAO,IAAMR,EAAeM,GAAKN,EAAeO,GAAKP,EAAeQ,ICwBvDC,EA3BK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,IAAIC,EAA2B,EAA3BA,OAAOC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SAAc,EACzBC,oBAAS,GADgB,mBAC5CC,EAD4C,KACrCC,EADqC,KAE7CC,EAAMP,EAAIQ,KAAK,KAEfC,GADMd,EAAQ,WAAR,cAAYK,IACV,WAAOG,IAQrB,OAPAO,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBN,GAAS,KACT,KACF,OAAO,kBAAIO,aAAaF,MACxB,CAACN,IAGD,0BACES,UAAS,gBAAWZ,EAAQ,IAAM,eAClCa,MAAO,CAACC,gBAAgB,OAAD,OAAQT,EAAR,MACvBU,QAAS,WACPX,GAAS,GACTY,UAAUC,UAAUC,UAAUX,IALlC,UAQE,oBAAGK,UAAU,gBAAb,UAA8Bb,EAA9B,OACA,mBAAGa,UAAU,cAAb,SAA4BL,IAC3BJ,GAAS,mBAAGS,UAAU,QAAb,gD,gBCqBDO,EA1CF,WAAO,IAAD,EACSjB,mBAAS,IADlB,mBACVkB,EADU,KACHC,EADG,OAESnB,oBAAS,GAFlB,mBAEVoB,EAFU,KAEHC,EAFG,OAGOrB,mBAAS,IAAIsB,IAAO,WAAWC,IAAI,KAH1C,mBAGVC,EAHU,KAGJC,EAHI,KAejB,OACE,qCACE,0BAASf,UAAU,YAAnB,UACE,oBAAIA,UAAU,QAAd,0BACA,qBAAKA,UAAU,QAAf,SACE,uBAAMG,QAfM,SAACa,GACnBA,EAAEC,iBACF,IACE,IAAIC,EAAS,IAAIN,IAAOJ,GAAOK,IAAI,IACnCE,EAAQG,GACR,MAAOR,GACPC,GAAS,KASL,UACE,uBACEQ,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACL,GAAD,OAAOP,EAASO,EAAEM,OAAOF,QACnCG,YAAY,UACZvB,UAAS,UAAKU,EAAM,QAAU,QAEhC,wBAAQV,UAAU,MAAMmB,KAAK,SAA7B,6BAMN,yBAASnB,UAAU,SAAnB,SACGc,EAAKU,KAAI,SAAChB,EAAMpB,GACf,OAAO,cAAC,EAAD,2BAA6BoB,GAA7B,IAAoCpB,MAAOA,EAAOC,SAAUmB,EAAM9B,MAAhDU,YClCpBqC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aea04cbe.chunk.js","sourcesContent":["function componentToHex(c) {\r\n  var hex = c.toString(16);\r\n  return hex.length === 1 ? '0' + hex : hex;\r\n}\r\n\r\nfunction rgbToHex(r,g,b) {\r\n  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\nexport default rgbToHex;","import React, {useState, useEffect} from 'react';\r\nimport rgbToHex from './utils';\r\n\r\nconst SingleColor = ({rgb,weight,index,hexColor}) => {\r\n  const [alert, setAlert] = useState(false);\r\n  const bcg = rgb.join(',')\r\n  const hex = rgbToHex(...rgb)\r\n  const hexValue = `#${hexColor}`\r\n  useEffect(()=> {\r\n    const timeout = setTimeout(()=> {\r\n      setAlert(false)\r\n    },1000)\r\n    return ()=>clearTimeout(timeout)\r\n  },[alert])\r\n\r\n  return (\r\n    <article \r\n      className={`color ${index > 10 && 'color-light'}`} \r\n      style={{backgroundColor:`rgb(${bcg})`}}\r\n      onClick={() => {\r\n        setAlert(true);\r\n        navigator.clipboard.writeText(hexValue)\r\n      }}\r\n    >\r\n      <p className=\"percent-value\">{weight}%</p>\r\n      <p className=\"color-value\">{hexValue}</p>\r\n      {alert && <p className=\"alert\">Copi√© dans le presse papier</p>}\r\n    </article> \r\n  )\r\n}\r\nexport default SingleColor","import React, { useState } from 'react';\r\nimport SingleColor from './SingleColor';\r\n\r\nimport Values from 'values.js';\r\n\r\nconst Form = () => {\r\n  const [color, setColor] = useState('');\r\n  const [error, setError] = useState(false);\r\n  const [list, setList] = useState(new Values('#f15025').all(10));\r\n\r\n  const handleSubmit =(e) => {\r\n    e.preventDefault()\r\n    try {\r\n      let colors = new Values(color).all(10)\r\n      setList(colors)\r\n    } catch (error) {\r\n      setError(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section className=\"container\">\r\n        <h1 className=\"title\">Mon nuancier</h1>\r\n        <div className=\"formu\">\r\n          <form onClick={handleSubmit}>\r\n            <input \r\n              type=\"text\" \r\n              value={color} \r\n              onChange={(e) => setColor(e.target.value)} \r\n              placeholder=\"#f15025\" \r\n              className={`${error?'error' : null}`}\r\n            />\r\n            <button className=\"btn\" type=\"submit\">Valider</button>\r\n          </form>\r\n        </div>\r\n      </section>\r\n      \r\n      {/*Nuancier*/}\r\n      <section className=\"colors\">\r\n        {list.map((color,index) =>{\r\n          return <SingleColor key={index} {...color} index={index} hexColor={color.hex}/>\r\n        })}\r\n      </section>\r\n    </>   \r\n  );\r\n}\r\nexport default Form;","import React from 'react';\nimport Form from './components/Form';\n\nfunction App() {\n  return <Form/>\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}